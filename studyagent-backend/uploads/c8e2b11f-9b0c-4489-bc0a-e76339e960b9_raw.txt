interface: defines how clients interact with a module

Jova "interface": language Feature for making

Last time: encapsulation/modularity interfaces for classes, signatures for public methods

Today: subtyping

Abstraction barrier
clients can't tell which implementation is being used

example

void display(Board b)f

ea calls CBoard.tile
b.tile(rye) § —————____ or TBoard.tile
- depending on what b
‘ refers to
3 2d array -—~
Static type
Boord B (= }+-_—> saisiey As ore
score |_ ed
= —> a
Board b = new CBoard(); eeeeeacee
static type dynamic type aaa

determines what methods are called
Subtyping

@ CBoard can be CBoard is a subtype
used wherever of Board
a Board is

clients expect to use board
expected

CBoard <: Board
means subset

subtype relationships

C Implements I, ¢ <: I
I1 extends 12, 11 <: 12

C1 extends C2, C1 <: C2 <— mheritance

Subtype hierarchy A class can implement >1 interface

Object,
Seiniteninareaars class TBoard implements Board, Set<Integer>{
Set<integer>

ae | boolean contains(Integer i)f
String Board : Moop over tiles ~~)
Integer tL] | oN

Board must implement Set<Integer> method
CBoard

Sound typing

Dynamic type must be a subtype of the static type

Casts
(te view value of e as at down-cast: —_supertype -> subtype
CBoard d = (CBoard) b;
up-cast: - can fail with ClassCastException
en ere eg. if b is actually a TBoard
Board b = (Board) ¢; - exposes CBoard
Heon't Fail, equiv. b = ¢ subtyping /= encapsulation

interface SolvableBoard extends Board{ i
Direetion[] solve(); Object

SolvableBoard <: Board Board

|

SolvableBoard