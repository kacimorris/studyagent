Anthropic
Tokens
* Input broken down into text fragments
* Ascii char is a token
Transformers
* Input through text, processed through transformers, probability distributions outputted
Sampling
* Select one of the samples outputted by the probability distribution, add it to the token and feed it through the transformer again
* Temp determines how deterministic the model is
Context Window
* The number of tokens that can first into working memory
Conversations
* Special “human” and “assistant” tokens to separate prompts and responses and concatenate everything together


Prompting
* Structure
   * 1-2 sentences to establish role and high level task desc
   * dynamic/retrieved content
   * Detailed task instructions
   * examples/n-shot (optional)
   * Repeat critical instructions(useful for long prompts)
* Disorganized prompts are hard to comprehend
* Use delimiters like XML tags
   * <> </>
   * More efficient for tokenization
* Giving examples is crucial in tasks that require consistent formatting
* Prefill Claude’s response
* Hallucinations
   * Have claude say i dont know
   * Only answer if its confident
   * Think before answering
   * Ask for quotes
* Prompt generator: console.anthropic.com
Tools
* Claude can’t natively do anything other than generate tokens
* You can put whatever you want on the other side of claude
* Claude generates json
* Server takes the relevant action and returns a response to Claude
* Can connect to any no-claude functionality
   * Retrieving data/querying databases
   * Interact with APIs
   * Executing code
* Best practices
   * Simple and accurate tool name
   * Detailed and well formed descriptions(what the tool returns)
   * Multiple simpler tools
Model Content Protocol
* Defines MCP servers and clients
   * Servers define tools they support and can carry out the actions
   * Clients get tool lists, supply tool contexts to models, and handle tool calls
* MCP: tool server
   * Place where tools are defined
   * Can be run locally -> to use
   * Local web server
   * Remote web server
Agents
* Ai systems that can autonomously plan and execute complex tasks
* Not just a prompt-response loop, but there's an environment 
* Characterized by
   * Tool use
   * Planning and reasoning
* Limited by context window
* Use workflow for simpler tasks


Workflow
* Read X
* Propose Y
* Implement
* Test
Claude tips
* Think or think harder
* Visual feedback
* Put claude.md files